#include <bits/stdc++.h>
using namespace std;

struct Edge {
    int u, v, weight;
    bool operator<(const Edge& other) const {
        return weight < other.weight;
    }
};

int find(vector<int>& parent, int x) {
    return parent[x] == x ? x : parent[x] = find(parent, parent[x]);
}

bool unionSets(vector<int>& parent, vector<int>& rank, int a, int b) {
    a = find(parent, a);
    b = find(parent, b);
    if (a == b) return false;
    if (rank[a] < rank[b]) swap(a, b);
    parent[b] = a;
    if (rank[a] == rank[b]) rank[a]++;
    return true;
}

int main() {
    int n, m; // n = nodes, m = edges
    cin >> n >> m;
    vector<Edge> edges(m);
    for (auto& e : edges)
        cin >> e.u >> e.v >> e.weight;

    sort(edges.begin(), edges.end());
    vector<int> parent(n), rank(n, 0);
    iota(parent.begin(), parent.end(), 0);

    int mst_weight = 0;
    for (auto& e : edges) {
        if (unionSets(parent, rank, e.u, e.v)) {
            mst_weight += e.weight;
            cout << e.u << " - " << e.v << " : " << e.weight << endl;
        }
    }

    cout << "Total Weight of MST: " << mst_weight << endl;
    return 0;
}
/*
4 5
0 1 10
0 2 6
0 3 5
1 3 15
2 3 4
*?
